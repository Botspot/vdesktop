#!/bin/bash
DIRECTORY="$(readlink -f $(dirname $0))"

CURRENT_VER="$(wget -qO- https://raw.githubusercontent.com/Botspot/vdesktop/master/version)"
LOCAL_VER="$(head -n 1 "${DIRECTORY}/version")"
if [ ! -z $CURRENT_VER ] && [ $CURRENT_VER -gt $LOCAL_VER ];then
  echo -e "A new version of vdesktop is available."
  echo -e "To upgrade, run the following command to upgrade:"
  echo -e "  pushd $DIRECTORY; git pull origin master; popd"
fi

if [ -z $CURRENT_VER ];then
  echo -e "\e[91mFailed to check for updates!\e[39m\nIf you"\'"re sure you have an Internet connection, then something isn"\'"t right."
fi

#echo -e "Script located in:"
#echo -e$DIRECTORY
if [ -z "$1" ]; then
  echo -e "\e[91mYou did not specify what to boot.\e[39m\nAvailable devices:"
  lsblk -do PATH,MODEL,SIZE
  if [ $(id -u) -ne 0 ]; then
    echo -e "\e[91mAnd you did not run this script as root user.\e[39m"
  fi
  echo -e "
Vdesktop can boot from an image file:   sudo vdesktop /home/pi/raspbian-buster.img
Or a block device:                      sudo vdesktop /dev/sda
Or a Raspbian root directory:           sudo vdesktop /home/pi/old-raspbian/

A second word specifies the boot mode: cli, cli-login, and gui. If none specified, cli mode is assumed."
  exit 0
# Ensure being run as root
elif [ $(id -u) -ne 0 ]; then
  echo -e "\e[91mYou did not run this script as root user.\e[39m"
  exit 0
fi
#apt -y install xserver-xephyr systemd-container

PKG_NAMES="" # list of pretty names to show user
PKG_LIST="" # list of package names to show apt

# ensure systemd-nspawn is installed
REQ_PKG=systemd-container
REQ_NAME=Systemd-nspawn
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# ensure xephyr is installed
REQ_PKG=xserver-xephyr
REQ_NAME=Xephyr
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# ensure expect is installed
REQ_PKG=expect
REQ_NAME=Expect
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  PKG_NAMES="${PKG_NAMES}, ${REQ_NAME}" # add user-friendly package name to list
  PKG_LIST="${PKG_LIST} ${REQ_PKG}" # add apt-friendly package name to list
fi

# delete first comma. From ", Systemd-nspawn, Xephyr and Expect" to "Systemd-nspawn, Xephyr and Expect"
PKG_NAMES="$(sed 's/, //' <<< $PKG_NAMES)"
# replace last comma with and. From ", Systemd-nspawn, Xephyr, Expect" to ", Systemd-nspawn, Xephyr and Expect"
PKG_NAMES="$(sed 's/\(.*\), /\1 and /' <<< $PKG_NAMES)"
# delete first space from apt list. From " systemd-container ..." to "systemd-container ..."
PKG_LIST="$(sed 's/ //' <<< $PKG_LIST)"

if [[ ! -z "$PKG_LIST" ]]; then
  if [ "$(wc -w <<< "$PKG_NAMES")" -gt 1 ]; then # if only one package, change "need" to "needs".
    echo -e "${PKG_NAMES} need to be installed for vdesktop to work. Proceed? [Y/n]" | fold -s
  else
    echo -e "${PKG_NAMES} needs to be installed for vdesktop to work. Proceed? [Y/n]" | fold -s
  fi
  read yesno
  if [[ "$yesno" == "n" ]]; then
    echo -e "\e[91mGoodbye!\e[39m"
    exit 0
  else
    # PKG_LIST must not be in quotes so apt sees them as seperate packages
    apt --force-yes --yes install $PKG_LIST || exit 1
  fi
fi

function cleanup {
  echo ""
  
  #echo "Press Enter to clean up."
  #read enter
  
  echo -en "Cleaning up..."
  printf '\e]12;#AAAAAA\a' # change cursor color back to lxterminal default
  
  # unmount modifications to the guest
  umount "${mntpnt}/etc/shadow" &>/dev/null
  umount "${mntpnt}/var/lib/dbus/machine-id" &>/dev/null
  umount "${mntpnt}/etc/machine-id" &>/dev/null
  umount "${mntpnt}/etc/profile" &>/dev/null
  
  # Sometimes Xephyr does not close automatically after container is terminated.
  killall Xephyr &>/dev/null
  
  umount -fl "${mntpnt}/boot" &>/dev/null
  umount -fl "$mntpnt" &>/dev/null
  losetup -d "$LOOP" &>/dev/null
  
  rm "${DIRECTORY}/machine-id" &>/dev/null
  machinectl poweroff vdesktop &>/dev/null
  echo -e " Done"
  exit 0
}

trap cleanup EXIT

#read config file and remove lines containing '#'
conf="$(cat "${DIRECTORY}/config" | grep -v '#')"

if [ -z "$conf" ];then
  echo "config file missing!"
  exit 1
fi

unmountonexit="$(echo "$conf" | sed -n 1p)"
username="$(echo "$conf" | sed -n 2p)"
password="$(echo "$conf" | sed -n 3p)"
mntpnt="$(echo "$conf" | sed -n 4p)" # if .img file or block device, this is default mount point

echo "Unmount on exit: $unmountonexit
User: $username
Pass: $password
Mountpoint: $mntpnt"

#ensure mountpoint exists
mkdir -p "${mntpnt}" &>/dev/null
umount -fl "${mntpnt}" &>/dev/null

if [ -z "$2" ];then
  bootmode='gui'
else
  bootmode="$2"
fi

# if user accidentally shutdown the host while guest was running, systemd masks "-.mount" by default. 
# This ensures -.mount is not masked, though it usually takes a reboot to see any effect.
systemctl unmask  -- -.mount 

#message from botspot
echo -e "$(wget -qO- https://raw.githubusercontent.com/Botspot/vdesktop-message/master/message-text)"

# IMG FILE
if [[ "$1" == *".img" ]] && [ -f "$1" ]; then
  echo -e "OK, you specified a disk image."
  LOOP="$(losetup -fP --show $1)"
  echo -e "Here"\'"s the loop device for it: $LOOP"
  mount -o rw "${LOOP}p2" "${mntpnt}"
  mount -o rw "${LOOP}p1" "${mntpnt}/boot"

# BLOCK DEVICE
elif [ -b "$1" ]; then
  echo -e "OK, you specified a /dev location or block device" | fold -s
  if [[ "$1" == *[1-9] ]]; then
    # partition number specified, so do nothing
    true
  else
    # partition number not specified
    # check if partition 2 exists
    if [ -b "${1}2" ]; then 
      echo -e "Partiton 2 exists. Booting..."
      partnum=2

      # try partition 1
    elif [ -b "${1}1" ]; then 
      echo -e "Partition 2 does not exist. Vdesktop will attempt to boot partition 1." | fold -s
      partnum=1
    else
      # neither 1 nor 2 exist
      echo -e "\e[91mCould not detect any partitions!\e[39m"
      exit 1
    fi
  fi
    rootdev=$(echo -e "$(findmnt / -fnr)" | awk '{print $2}') # Which block device is mounted to  filesystem root

    # if guest uuid is equal to filesystem roots uuid
    if [[ "$(echo -e "$(udevadm info -q all -n $1${partnum} | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" == "$(echo -e "$(udevadm info -q all -n $rootdev | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" ]]; then
      echo -e "The device you are trying to boot from and your microSD have the same UUID."
      echo -e "Vdesktop can fix the problem by changing the UUID. Proceed? [Y/n]"
      read answer 
      if [ "$answer" == "n" ]; then
        echo -e "\e[91mUUID not changed. Exiting.\e[39m"
        exit 0
      else
        echo -e "Alright, changing the UUID"
        e2fsck -pf "$1${partnum}"
        tune2fs "$1${partnum}" -U random
      fi
    fi
  # finally mount the block device
  umount -l "$1${partnum}" &>/dev/null
  mount "$1${partnum}" "${mntpnt}" -o suid
  if [ $partnum -eq 2 ]; then #mount partition 1 at boot in guest
    umount "${1}1" &>/dev/null
    mount "${1}1" "${mntpnt}/boot" -o suid
    echo -e "mounting boot as well"
  fi

# PREVENT BOOTING ROOT
elif [ "$1" == "/" ]; then
  echo -e "\e[91mYou cannot boot from Filesystem Root.\e[39m"
  exit 1

# DIRECTORY
elif [ -d "$1" ]; then
  echo -e "OK, looks like you specified a directory"
  # mount the specified directory to default location
  mount --bind "$1" "${mntpnt}"
# NOT_FOUND
else
  echo -e "\e[91mNo such file or directory. Check spelling and try again.\e[39m"
  if [[ "$1" == "/dev/"* ]]; then
    lsblk -do PATH,MODEL,SIZE
  fi
  exit 1
fi

if [ $mntpnt == "*/" ]; then # ensure there is no trailing slash
  mntpnt="${mntpnt: :-1}"
fi

mount -n -o remount,suid,rw "$mntpnt" # remount to allow root access

if diff "${mntpnt}/etc/machine-id" "/etc/machine-id" > /dev/null || [ -z $(cat "${mntpnt}/etc/machine-id" | head -n1) ]
then
  echo -e "Temporarily changing Machine ID"
  dbus-uuidgen --ensure="${DIRECTORY}/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/var/lib/dbus/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/etc/machine-id"
  # rm -f "${mntpnt}/etc/machine-id"
fi

/bin/echo -e "Your cursor color will be \e[44mblue\e[49m until the container is terminated."
echo -e -n "Booting in 5 seconds"

# terminate any previous instances of the machine in case it did not exit cleanly
machinectl terminate vdesktop &>/dev/null
machinectl poweroff vdesktop &>/dev/null

sleep 1
echo -n '.'
sleep 1
echo -n '.'
sleep 1
echo -n '.'
sleep 1
echo -n '.'
sleep 1
echo '.'

if [ "$bootmode" == "gui" ]; then
  #this starts the desktop session inside the guest
  mount --bind "${DIRECTORY}/profile" "${mntpnt}/etc/profile"
  
  # start Xephyr when an additional instance of lxsession is detected.
  INITIAL_X_INSTANCES="$(pgrep lxsession | wc -l)"
  
  #get screen dimensions to calculate xephyr size
  screen_width="$(xdpyinfo | grep 'dimensions:' | tr 'x' '\n' | tr ' ' '\n' | sed -n 7p)"
  screen_height="$(xdpyinfo | grep 'dimensions:' | tr 'x' '\n' | tr ' ' '\n' | sed -n 8p)"
  
  eval '
    while [ "$INITIAL_X_INSTANCES" -eq "$(pgrep lxsession | wc -l)" ]; do
      sleep 0.01
    done
    "${DIRECTORY}/clipboardsync" &
    Xephyr -no-host-grab -title Vdesktop -ac -screen ${screen_width}x$((screen_height-73)) -br -glamor -resizeable :1 2>/dev/null' &
fi

if [ "$bootmode" == "gui" ] || [ "$bootmode" == "cli-login" ]; then
  echo "Booting in auto-login mode."
  #change cursor color while in guest
  printf '\e]12;#0000AA\a'
  # boot the guest
  echo -e ""
  echo -e ""
  /usr/bin/expect -c "set timeout -1
  spawn ${DIRECTORY}/nspawn $mntpnt
  expect -re .*login:
  send -- ${username}\r
  expect -re .*Password:
  send -- ${password}\r
  interact ''
  expect eof"
else
  #change cursor color while in guest
  printf '\e]12;#0000AA\a' 
  # boot the guest
  echo -e "\n\n"
  "${DIRECTORY}/nspawn" "$mntpnt"
fi

#change cursor color back to lxterminal default
printf '\e]12;#AAAAAA\a'

echo -e ""
killall clipboardsync &>/dev/null
killall Xephyr &>/dev/null

if [ "$unmountonexit" != 'yes' ];then
  echo -e "The machine has exited, but you can still access its filesystem. Press Ctrl+C to unmount ${mntpnt}"
  sleep infinity
fi
