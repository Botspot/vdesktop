#!/bin/bash
DIRECTORY="$(dirname $0)"

CURRENT_VER="$(wget -qO- https://raw.githubusercontent.com/Botspot/vdesktop/master/version)"
LOCAL_VER="$(head -n 1 ${DIRECTORY}/version)"
if [ $CURRENT_VER -gt $LOCAL_VER ];then
  echo "Vdesktop has a new version. Would you like to download it? [Y/n]"
  read yesno
  if [[ "$yesno" == "n" ]]; then
    echo "OK, Vdesktop will not download the new version."
  else
    echo "OK. Downloading Vdesktop."
    cd
    rm -rf /home/pi/vdesktop.new
    sudo -u pi git clone https://github.com/Botspot/vdesktop /home/pi/vdesktop.new &>/dev/null
    NEW_VER="$(head -n 1 /home/pi/vdesktop.new/version)"
    if [ $NEW_VER -gt $LOCAL_VER ];then
      echo "New version has been downloaded. Vdesktop is exiting."
      sudo -u pi cp -rf /home/pi/vdesktop.new/* ${DIRECTORY}
      chmod +x /home/pi/vdesktop/rc.local /home/pi/vdesktop/vdesktop
      echo ""
      exit 0
      sudo -u pi rm -rf /home/pi/vdesktop.new
    else
      echo "Could not successfully download Vdesktop. Vdesktop will continue."
      sudo -u pi rm -rf /home/pi/vdesktop.new
    fi
  fi
fi
sudo -u pi rm -rf /home/pi/vdesktop.new
#echo "Script located in:"
#echo $DIRECTORY
if [ -z "$1" ]; then
  echo "You did not specify what to boot."
  lsblk -o PATH,VENDOR,SIZE
  if [ $(id -u) -ne 0 ]; then
    echo "And you did not run this script as root user."
  fi
  echo ""
  echo "I can boot from an image file:                  sudo vdesktop /home/pi/Downloads/2018-07-09-pi-topOS.img"
  echo "Or a block device:                              sudo vdesktop /dev/sda"
  echo "Or the root directory of the virtual desktop:   sudo vdesktop /home/pi/old-raspbian/"
  exit 0
elif [ $(id -u) -ne 0 ]; then
  echo "You did not run this script as root user."
  exit 0
fi
#apt -y install xserver-xephyr systemd-container

function cleanup {
  echo ""
  echo "Preparing to exit..."
  #unmount modifications to the guest
  umount "${mntpnt}/etc/rc.local"
  umount "${mntpnt}/etc/profile"
  umount "${mntpnt}/var/lib/dbus/machine-id"
  umount "${mntpnt}/etc/machine-id"
  
  #Sometimes Xephyr does not close automatically after container is terminated.
  killall Xephyr &>/dev/null
  
  umount -fl "${mntpnt}/boot"
  umount -fl "$mntpnt"
  losetup -d "$LOOP"
  
  rm "${DIRECTORY}/machine-id" &>/dev/null
  echo "Unmounted and exiting..."
  killall vdesktop
}

trap cleanup EXIT

REQ_PKG=systemd-container
REQ_NAME=Systemd-nspawn
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  echo "$REQ_NAME is required but not installed. Install it now? [Y/n]"
  read yesno
  if [[ "$yesno" == "y" ]]; then
    echo "Alright. Installing '$REQ_NAME'."
    apt --force-yes --yes install "$REQ_PKG"
  elif [[ "$yesno" == "n" ]]; then
    exit 0
  else
    echo "Alright. Installing '$REQ_NAME'."
    apt --force-yes --yes install "$REQ_PKG"
  fi  
fi

REQ_PKG=xserver-xephyr
REQ_NAME=Xephyr
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQ_PKG"|grep "install ok installed")
if [ "" == "$PKG_OK" ]; then
  echo "$REQ_NAME is required but not installed. Install it now? [Y/n]"
  read yesno
  if [[ "$yesno" == "y" ]]; then
    echo "Alright. Installing '$REQ_NAME'."
    apt-get --force-yes --yes install "$REQ_PKG"
  elif [[ "$yesno" == "n" ]]; then
    exit 0
  else
    echo "Alright. Installing '$REQ_NAME'."
    apt-get --force-yes --yes install "$REQ_PKG"
  fi  
fi

mntpnt="/media/pi/vdesktop" #if .img file or block device, this is default mount point
mkdir "${mntpnt}" &>/dev/null
umount "${mntpnt}" &>/dev/null

#if user accidentally shutdown the host while guest was running, systemd masks "-.mount" by default. 
#This ensures -.mount is not masked, though it usually takes a reboot to take effect.
systemctl unmask  -- -.mount 

if [ -b "$1" ]; then
  echo "OK, looks like you specified a /dev location or block device"
  if [[ "$1" == *[1-9] ]]; then
    true #echo "You specified the partition number."
    umount -l "$1"
  else
    echo "You did not specify partition number."
    echo "Would you like to specify one? (y/n) If not, I will try partition 2."
    read yesno
    if [[ "$yesno" == "y" ]]; then
      echo "Alright. Input partiton number. (1-9)"
      read partnum
    elif [[ "$yesno" == "n" ]]; then
      echo "Alright. I will try partition 2"
      partnum=2
      if [ -b "$1${partnum}" ]; then
        true
      else
        echo "$1${partnum} does not exist."
        exit 1
      fi
    else
      echo 'I didn'\''t understand that. Next time type '\''y'\'' or '\''n'\''.'
      exit 1
    fi
  fi
    rootdev=$(echo "$(findmnt / -fnr)" | awk '{print $2}') #Which block device is mounted to /
    #echo ""
    #echo "block device for / is:"
    #echo "$rootdev"
    #echo ""
    
    #echo "you chose:"
    #echo $(echo "$(udevadm info -q all -n $1${partnum} | grep 'by-uuid')" | awk '{print $2}'| head -n 1)
    #echo "root block device:"
    #echo $(echo "$(udevadm info -q all -n $rootdev | grep 'by-uuid')" | awk '{print $2}'| head -n 1)

    if [[ "$(echo "$(udevadm info -q all -n $1${partnum} | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" == "$(echo "$(udevadm info -q all -n $rootdev | grep 'by-uuid')" | awk '{print $2}'| head -n 1)" ]]; then #if uuids are equal
      echo "The device you are trying to boot from and your microSD have the same UUID."
      echo "I can fix the problem by changing the UUID. Do I have your permission? (y/n)"
      read answer 
      if [ "$answer" == "y" ]; then
        echo "Alright, changing the UUID"
        tune2fs "$1${partnum}" -U random
      elif [ "$answer" == "n" ]; then
        echo "OK then, I will not change the UUID."
      else
        echo 'I didn'\''t understand that. Next time type '\''y'\'' or '\''n'\''.'
        exit 0
      fi
    fi
  mount "$1${partnum}" "$mntpnt" -o suid
elif [[ "$1" == *".img" ]] && [ -f "$1" ]; then
  echo "OK, looks like you specified an .img file."
  echo "$1"
  LOOP="$(losetup -fP --show $1)"
  echo "$LOOP"
  mount -o rw "${LOOP}p2" "$mntpnt"
  mount -o rw "${LOOP}p1" "${mntpnt}/boot"

elif [ "$1" == "/" ]; then
  echo "You cannot boot from Filesystem Root."
  exit 0
elif [ -d "$1" ]; then
  echo "OK, looks like you specified a directory"
  mntpnt=$1
else
  echo "No such file or directory. Check spelling and try again."
  if [[ "$1" == "/dev/"* ]]; then
    lsblk -o PATH,VENDOR,SIZE
  fi
  exit 1
fi

if [ $mntpnt == "*/" ]; then #ensure there is no trailing slash
  mntpnt=${mntpnt: :-1}
fi
mount -n -o remount,suid,rw "$mntpnt" #remount to allow root access

#sed -i "/exit 0/i\/usr/bin/vncserver-virtual &" "${mntpnt}/etc/rc.local"

if diff "${mntpnt}/etc/machine-id" "/etc/machine-id" > /dev/null
then
  echo "Temporarily changing Machine ID"
  dbus-uuidgen --ensure="${DIRECTORY}/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/var/lib/dbus/machine-id"
  mount --bind "${DIRECTORY}/machine-id" "${mntpnt}/etc/machine-id"
  #rm -f "${mntpnt}/etc/machine-id"
fi

/bin/echo -e "Your cursor color will be \e[34mblue\e[39m until the container is terminated."
echo "Booting in 5 seconds."
sleep 5
#mount .profile and rc.local in guest to start lxsession before login.
mount --bind "${DIRECTORY}/profile" "${mntpnt}/etc/profile"
mount --bind "${DIRECTORY}/rc.local" "${mntpnt}/etc/rc.local"
#start second X session to interact with guest


#start Xephyr when an additional instance of lxsession is detected.
INITIAL_X_INSTANCES="$(pgrep lxsession | wc -l)"
eval 'while [ "$INITIAL_X_INSTANCES" -eq "$(pgrep lxsession | wc -l)" ]; do true; sleep 0.01; done; Xephyr -ac -screen 1270x960 -br -resizeable 2> /dev/null :1' &

printf '\e]12;#0000aa\a' #change cursor color while in guest so user does not forget
#boot the guest
echo ""
echo ""
systemd-nspawn --machine "virtualdesktop" -bD "$mntpnt"

echo ""
echo "The machine has exited, but you can still access the guest. Press Ctrl+C to unmount ${mntpnt}"

printf '\e]12;#aaa\a' #change cursor color back to lxterminal default

sleep infinity
